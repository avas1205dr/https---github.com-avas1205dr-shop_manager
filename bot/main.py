import telebot
import sqlite3
from telebot import types

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7793591374:AAHYhGqYiNgg3EqKvSJFHsFxGCgpEKw7mgk'

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('db/shops.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def init_db():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shops (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            payment_detail TEXT,
            owner_id VARCHAR,
            bot_api TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            shop_id INTEGER,
            name TEXT NOT NULL,
            description TEXT(500),
            price REAL,
            FOREIGN KEY(shop_id) REFERENCES shops(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username VARCHAR NOT NULL,
        role VARCHAR,
        tg_id INTEGER)
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            token TEXT UNIQUE,
            is_active BOOLEAN DEFAULT TRUE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS shop_to_bots (
            shop_id INTEGER,
            bot_id INTEGER,
            PRIMARY KEY (shop_id, bot_id),
            FOREIGN KEY(shop_id) REFERENCES shops(id),
            FOREIGN KEY(bot_id) REFERENCES bots(id)
        )
    ''')
    conn.commit()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ë–î
def get_shops_by_tg_id(tg_id):
    return cursor.execute("SELECT id, name FROM shops WHERE owner_id = (?)", (tg_id,)).fetchall()

def add_user(message):
    username = message.from_user.username
    cursor.execute(f'''
        INSERT INTO users(username)
        VALUES('{username}');''')
    
    conn.commit()
    cursor.execute(f'''
        UPDATE users
        SET tg_id = '{message.from_user.id}'
        WHERE username = '{username}';
    ''')
    conn.commit()
    return 

def get_owner_by_shop_id(shop_id) -> int:
    return cursor.execute("SELECT tg_id FROM users INNER JOIN shops ON users.id = shops.owner_id WHERE shops.id = (?)", (shop_id,))



@bot.message_handler(commands=['start', 'help', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
def handle_start_help(message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/newshop - –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "/addproduct - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/list_my_shops - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã\n"
        "/listproducts - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞\n"
    )
    add_user(message)
    bot.send_message(message.chat.id, help_text)
    
@bot.message_handler(commands=['newshop'])
def create_shop(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = telebot.types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω')
    btn2 = telebot.types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    markup.add(btn1, btn2)
    msg = (
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞, –ø–æ—Ç–æ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω?\n "
    "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞ –≤ BotFather (Telegram):\n"
    "1) –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤).\n"
    "2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /newbot.\n"
    "3) –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ —á–∞—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, TestBot).\n"
    "4) –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ bot, –Ω–∞–ø—Ä–∏–º–µ—Ä, TestExampleBot).\n"
    "5) –ü–æ–ª—É—á–∏—Ç–µ API-—Ç–æ–∫–µ–Ω (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º).\n"
    "6) –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:\n"
    "7) /setdescription - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞.\n"
    "8) /setabouttext - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n"
    "9) /setcommands - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
    "10) –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ Python (aiogram, python-telegram-bot), Node.js (telegraf) –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö.\n"
    "üîπ –ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11 (–Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ!)\n")
    bot.send_message(message.chat.id, msg, reply_markup=markup)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_temp_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_temp_data = {}

@bot.message_handler(commands=['newshop'])
def handle_new_shop(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    btn2 = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    
    instructions = (
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:\n"
        "- –ù–∞–π—Ç–∏ @BotFather –≤ Telegram\n"
        "- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot\n"
        "- –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"
    )
    bot.send_message(message.chat.id, instructions, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω', '–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ'])
def handle_input_commands(message):
    if message.text == '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        btn2 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1, btn2)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:', reply_markup=markup)
        bot.register_next_step_handler(msg, process_token_input)
    elif message.text == '–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        btn2 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1, btn2)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:', reply_markup=markup)
        bot.register_next_step_handler(msg, process_name_input)

def process_token_input(message):
    if message.text in ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥']:
        handle_menu_actions(message)
        return
    
    if len(message.text) < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if message.chat.id not in user_temp_data:
        user_temp_data[message.chat.id] = {}
    
    user_temp_data[message.chat.id]['bot_api'] = message.text
    bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    if 'name' in user_temp_data[message.chat.id]:
        complete_shop_creation(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ'))
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:', reply_markup=markup)

def process_name_input(message):
    if message.text in ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥']:
        handle_menu_actions(message)
        return
    
    if len(message.text) < 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if message.chat.id not in user_temp_data:
        user_temp_data[message.chat.id] = {}
    
    user_temp_data[message.chat.id]['name'] = message.text
    bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    if 'bot_api' in user_temp_data[message.chat.id]:
        complete_shop_creation(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω'))
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:', reply_markup=markup)

def complete_shop_creation(message):
    shop_data = user_temp_data.get(message.chat.id, {})
    shop_name = shop_data.get('name')
    bot_token = shop_data.get('bot_api')
    
    if not shop_name:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∞–≥–∞–∑–∏–Ω–µ
        cursor.execute('''
            INSERT INTO shops (name, owner_id, bot_api)
            VALUES (?, ?, ?)
        ''', (shop_name, message.from_user.id, bot_token))
        shop_id = cursor.lastrowid
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞
        if bot_token:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É bots
            cursor.execute('INSERT OR IGNORE INTO bots (token) VALUES (?)', (bot_token,))
            
            # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
            cursor.execute('SELECT id FROM bots WHERE token = ?', (bot_token,))
            bot_id = cursor.fetchone()[0]
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–∞–≥–∞–∑–∏–Ω-–±–æ—Ç
            cursor.execute('''
                INSERT INTO shop_to_bots (shop_id, bot_id)
                VALUES (?, ?)
            ''', (shop_id, bot_id))
        
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω '{shop_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
    except sqlite3.Error as e:
        conn.rollback()
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if message.chat.id in user_temp_data:
            del user_temp_data[message.chat.id]

def handle_menu_actions(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω'), types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

def link_bot_to_shop(shop_id, bot_token):
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
        cursor.execute('INSERT OR IGNORE INTO bots (token) VALUES (?)', (bot_token,))
        
        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
        cursor.execute('SELECT id FROM bots WHERE token = ?', (bot_token,))
        bot_id = cursor.fetchone()[0]
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –∏ –±–æ—Ç–∞
        cursor.execute('''
            INSERT OR IGNORE INTO shop_bots (shop_id, bot_id)
            VALUES (?, ?)
        ''', (shop_id, bot_id))
        
        conn.commit()
        return True
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –±–æ—Ç–∞: {e}")
        return False


@bot.message_handler(commands=['list_my_shops'])
def list_my_shops(message):
    shops = get_shops_by_tg_id(message.from_user.id)
    owner_id = message.from_user.id
    if not shops:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
        return
    response = "–ú–∞–≥–∞–∑–∏–Ω—ã:\n" + "\n".join([f"id –≤–ª–∞–¥–µ–ª—å—Ü–∞: {owner_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {shop[1]}" for shop in shops])
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['addproduct'])
def add_product(message):
    shops = get_shops_by_tg_id(message.from_user.id)
    if not shops:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–∞–Ω–¥–æ–π /newshop")
        return
    shop_list = "\n".join([f"{shop[0]}. {shop[1]}" for shop in shops])
    msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —É–∫–∞–∑–∞–≤ –µ–≥–æ id:\n{shop_list}")
    bot.register_next_step_handler(msg, process_shop_selection_for_product)

def process_shop_selection_for_product(message):
    try:
        shop_id = int(message.text.strip())
        shop = cursor.execute("SELECT id FROM shops WHERE id=?", (shop_id,)).fetchone()
        if not shop:
            bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, save_product_name, shop_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def save_product_name(message, shop_id):
    product_name = message.text.strip()
    if not product_name:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(msg, save_product_price, shop_id, product_name)

def save_product_price(message, shop_id, product_name):
    try:
        price = float(message.text.strip())
        cursor.execute(
            "INSERT INTO products (shop_id, name, price) VALUES (?, ?, ?)",
            (shop_id, product_name, price)
        )
        conn.commit()
        bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{product_name}' –ø–æ —Ü–µ–Ω–µ {price} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
@bot.message_handler(commands=['listproducts'])
def list_products(message):
    shops = cursor.execute("SELECT id, name FROM shops").fetchall()
    if not shops:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
        return
    shop_list = "\n".join([f"{shop[0]}. {shop[1]}" for shop in shops])
    msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, —É–∫–∞–∑–∞–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:\n{shop_list}")
    bot.register_next_step_handler(msg, show_products_for_shop)

def show_products_for_shop(message):
    try:
        shop_id = int(message.text.strip())
        shop_exists = cursor.execute("SELECT id FROM shops WHERE id=?", (shop_id,)).fetchone()
        if not shop_exists:
            bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        products = cursor.execute("SELECT name, price FROM products WHERE shop_id=?", (shop_id,)).fetchall()
        if not products:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
            return
        response = "–¢–æ–≤–∞—Ä—ã:\n" + "\n".join([f"{name} - {price} —Ä—É–±." for name, price in products])
        bot.send_message(message.chat.id, response)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")


bot.polling(non_stop=True)